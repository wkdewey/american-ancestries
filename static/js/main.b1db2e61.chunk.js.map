{"version":3,"sources":["components/NavBar.js","components/Loading.js","components/places/Place.js","components/places/PlaceComparison.js","actions/ancestryGroupActions.js","components/places/PlaceInput.js","actions/placeActions.js","components/Like.js","components/places/Places.js","containers/PlacesContainer.js","components/ancestry_groups/AncestryGroups.js","components/ancestry_groups/AncestryGroup.js","containers/AncestryGroupsContainer.js","components/Home.js","App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["NavBar","Navbar","color","NavbarBrand","NavbarToggler","Nav","className","tabs","NavItem","NavLink","href","Loading","Spinner","Place","props","placeId","useParams","places","length","placeCard","place","find","id","groups","attributes","place_ancestry_groups","sort","a","b","percent","Card","CardBody","CardTitle","name","CardText","population","toLocaleString","Table","map","group","key","ancestry_group","relative_to_national","PlaceComparison","ListGroup","ListGroupItem","fetchAncestryGroups","dispatch","fetch","then","response","json","type","ancestryGroups","data","PlaceInput","handleNameChange","event","setState","target","value","handlePopulationChange","parseInt","handleGroupChange","ancestryGroupId","idx","findIndex","placeAncestryGroups","handleSubmit","e","preventDefault","formData","state","place_ancestry_groups_attributes","ancestry_group_id","addPlace","this","Form","onSubmit","FormGroup","Label","Input","onChange","ancestryGroupName","Button","Component","connect","method","headers","body","JSON","stringify","Like","liked","message","Places","handleLike","newLikes","placeLikes","CardColumns","CardLink","to","onClick","PlacesContainer","fetchPlaces","path","match","AncestryGroups","ancestryGroup","national_percent","AncestryGroup","ancestryGroupCard","national_pop","AncestryGroupsContainer","exact","Home","console","log","Jumbotron","App","render","routerProps","Boolean","window","location","hostname","reducer","action","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b1db2e61.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Nav,\n  Navbar,\n  NavLink,\n  NavItem,\n  NavbarBrand,\n  NavbarToggler,\n} from \"reactstrap\";\n\nconst NavBar = () => {\n  return (\n    <Navbar color=\"light\">\n      <NavbarBrand>American Ancestries</NavbarBrand>\n      <NavbarToggler></NavbarToggler>\n      <Nav className=\"mr-auto\" tabs>\n        <NavItem>\n          <NavLink href=\"/\">Home</NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink href=\"/places\">Places</NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink href=\"/ancestry_groups\">Ancestry Groups</NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink href=\"/places/new\">New Place</NavLink>\n        </NavItem>\n      </Nav>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Spinner } from \"reactstrap\";\n\nconst Loading = () => {\n  return (\n    <div>\n      <h3>Loading, please wait.</h3>\n      <Spinner />\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\nimport Loading from \"../Loading\";\nimport { useParams } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText, Table } from \"reactstrap\";\n\nconst Place = (props) => {\n  let { placeId } = useParams();\n  if (props.places.length > 0) {\n    const place = props.places.find((place) => place.id === placeId);\n    let placeCard;\n    if (place) {\n      const groups = place.attributes.place_ancestry_groups;\n      groups.sort((a, b) =>\n        a.attributes.percent < b.attributes.percent ? 1 : -1\n      );\n      placeCard = (\n        <div className=\"place\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <h3>{place.attributes.name}</h3>\n              </CardTitle>\n              <CardText>\n                Population: {place.attributes.population.toLocaleString()}\n              </CardText>\n            </CardBody>\n          </Card>\n          <Table>\n            <thead>\n              <tr>\n                <th>Ancestry</th>\n                <th>Percent</th>\n                <th>Relative to overall US population</th>\n              </tr>\n            </thead>\n            {groups.map((group) => {\n              return (\n                <tr className=\"ancestry group\" key={group.id}>\n                  <td>{group.attributes.ancestry_group.name}</td>\n                  <td>{group.attributes.percent}%</td>\n                  <td>{group.attributes.relative_to_national}x</td>\n                </tr>\n              );\n            })}\n          </Table>\n        </div>\n      );\n    } else {\n      placeCard = \"Place not found\";\n    }\n    return <div>{placeCard}</div>;\n  } else return <Loading />;\n};\n\nexport default Place;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\n\nconst PlaceComparison = (props) => {\n  let { placeId } = useParams();\n  if (props.places.length > 0) {\n    const place = props.places.find((place) => place.id === placeId);\n    let placeCard;\n    if (place) {\n      const groups = place.attributes.place_ancestry_groups;\n      groups.sort((a, b) =>\n        a.attributes.relative_to_national < b.attributes.relative_to_national\n          ? 1\n          : -1\n      );\n      placeCard = (\n        <div className=\"place compared\">\n          <h3>Sorted by relative representation</h3>\n          <p>(times the national average)</p>\n          <ListGroup>\n            {groups.map((group) => {\n              return (\n                <ListGroupItem\n                  className=\"ancestry group compared\"\n                  key={group.id}\n                >\n                  <p>\n                    {group.attributes.ancestry_group.name}:{\" \"}\n                    {group.attributes.relative_to_national}\n                  </p>\n                </ListGroupItem>\n              );\n            })}\n          </ListGroup>\n        </div>\n      );\n    } else {\n      placeCard = \"Place not found\";\n    }\n    return <div>{placeCard}</div>;\n  } else {\n    return null;\n  }\n};\n\nexport default PlaceComparison;\n","export const fetchAncestryGroups = () => {\n  return (dispatch) => {\n    fetch(\"https://damp-plateau-70733.herokuapp.com/api/v1/ancestry_groups\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        dispatch({ type: \"ADD_ANCESTRY_GROUPS\", ancestryGroups: json.data });\n        dispatch({\n          type: \"ADD_PLACE_ANCESTRY_GROUPS\",\n          ancestryGroups: json.data,\n        });\n      });\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addPlace } from \"../../actions/placeActions\";\nimport { fetchAncestryGroups } from \"../../actions/ancestryGroupActions\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport Loading from \"../Loading\";\n\nclass PlaceInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      population: 0,\n      placeAncestryGroups: null,\n    };\n  }\n\n  handleNameChange = (event) => {\n    this.setState({\n      name: event.target.value,\n    });\n  };\n\n  handlePopulationChange = (event) => {\n    this.setState({\n      population: parseInt(event.target.value),\n    });\n  };\n\n  handleGroupChange = (groups, id, event) => {\n    let group = { ...groups.find((group) => group.ancestryGroupId === id) };\n    group.population = parseInt(event.target.value);\n    const idx = groups.findIndex((group) => group.ancestryGroupId === id);\n    groups[idx] = group;\n    this.setState({\n      placeAncestryGroups: groups,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let formData = {\n      name: this.state.name,\n      population: this.state.population,\n      place_ancestry_groups_attributes: this.state.placeAncestryGroups.map(\n        (group) => {\n          return {\n            ancestry_group_id: group.ancestryGroupId,\n            population: group.population,\n          };\n        }\n      ),\n    };\n    this.props.addPlace(formData);\n    this.props.fetchAncestryGroups();\n    const placeAncestryGroups = this.state.placeAncestryGroups.map((group) => {\n      return { ...group, population: 0 };\n    });\n    this.setState({\n      name: \"\",\n      population: 0,\n      placeAncestryGroups,\n    });\n  };\n\n  render() {\n    let groups;\n    if (this.state.placeAncestryGroups) {\n      groups = [...this.state.placeAncestryGroups];\n    } else if (this.props.placeAncestryGroups) {\n      groups = [...this.props.placeAncestryGroups];\n    } else {\n      groups = [];\n      return <Loading />;\n    }\n    return (\n      <div>\n        <Form\n          onSubmit={(e) => {\n            this.handleSubmit(e);\n          }}\n        >\n          <FormGroup>\n            <Label>\n              Place name\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                value={this.state.name}\n                onChange={this.handleNameChange}\n              />\n            </Label>\n          </FormGroup>\n          <FormGroup>\n            <Label>\n              Total population\n              <Input\n                id=\"population\"\n                name=\"population\"\n                type=\"number\"\n                value={this.state.population}\n                onChange={this.handlePopulationChange}\n              />\n            </Label>\n          </FormGroup>\n          {groups.map((group) => {\n            return (\n              <FormGroup key={group.ancestryGroupId}>\n                <Label>\n                  {group.ancestryGroupName + \" population\"}\n                  <Input\n                    id={\"population \" + group.ancestryGroupName}\n                    name={\"population \" + group.ancestryGroupName}\n                    type=\"number\"\n                    value={group.population}\n                    onChange={(e) =>\n                      this.handleGroupChange(groups, group.ancestryGroupId, e)\n                    }\n                  />\n                </Label>\n              </FormGroup>\n            );\n          })}\n          <Button type=\"submit\"> Submit</Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPlace: (place) => dispatch(addPlace(place)),\n    fetchAncestryGroups: () => dispatch(fetchAncestryGroups()),\n  };\n};\nexport default connect(null, mapDispatchToProps)(PlaceInput);\n","export const fetchPlaces = () => {\n  return (dispatch) => {\n    fetch(\"https://damp-plateau-70733.herokuapp.com/api/v1/places\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        dispatch({ type: \"ADD_PLACES\", places: json.data });\n      });\n  };\n};\n\nexport const addPlace = (\n  place = {\n    name: \"\",\n    population: 0,\n    place_ancestry_groups_attributes: {},\n  }\n) => {\n  return (dispatch) => {\n    fetch(\"https://damp-plateau-70733.herokuapp.com/api/v1/places\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(place),\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({ type: \"ADD_PLACE\", place: json.data });\n      });\n  };\n};\n","import React, { Component } from \"react\";\n\nclass Like extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      liked: false,\n    };\n  }\n\n  render() {\n    const message = this.props.liked ? \"Liked!\" : \"Not liked\";\n    return (\n      <div>\n        <p>{message}</p>\n      </div>\n    );\n  }\n}\n\nexport default Like;\n","import React, { Component } from \"react\";\nimport Loading from \"../Loading\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardLink,\n  CardText,\n  CardColumns,\n  Button,\n} from \"reactstrap\";\nimport Like from \"../Like\";\n\nclass Places extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      placeLikes: [],\n    };\n  }\n\n  handleLike = (id, event) => {\n    const newLikes = [...this.state.placeLikes];\n    newLikes[id] = newLikes[id] ? !newLikes[id] : true;\n    this.setState({\n      placeLikes: newLikes,\n    });\n  };\n\n  render() {\n    if (this.props.places.length > 0) {\n      return (\n        <CardColumns>\n          {this.props.places.map((place) => {\n            return (\n              <div className=\"place\" key={place.id}>\n                <Card>\n                  <CardBody>\n                    <CardTitle>\n                      <h3>\n                        <CardLink>\n                          <Link key={place.id} to={`/places/${place.id}`}>\n                            {place.attributes.name}\n                          </Link>\n                        </CardLink>\n                      </h3>\n                    </CardTitle>\n                    <CardText>\n                      Population: {place.attributes.population.toLocaleString()}\n                    </CardText>\n                    <Button\n                      onClick={(event) => {\n                        this.handleLike(place.id, event);\n                      }}\n                    >\n                      Like\n                    </Button>\n                    <Like liked={this.state.placeLikes[place.id] || false} />\n                  </CardBody>\n                </Card>\n              </div>\n            );\n          })}\n        </CardColumns>\n      );\n    } else {\n      return <Loading />;\n    }\n  }\n}\n\nexport default Places;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Place from \"../components/places/Place\";\nimport PlaceComparison from \"../components/places/PlaceComparison\";\nimport PlaceInput from \"../components/places/PlaceInput\";\nimport Places from \"../components/places/Places\";\nimport { fetchPlaces } from \"../actions/placeActions\";\nimport { fetchAncestryGroups } from \"../actions/ancestryGroupActions\";\n\nclass PlacesContainer extends Component {\n  componentDidMount() {\n    this.props.fetchPlaces();\n    this.props.fetchAncestryGroups();\n  }\n\n  render() {\n    const places = this.props.places;\n    const placeAncestryGroups = this.props.placeAncestryGroups;\n    return (\n      <div>\n        <Switch>\n          <Route path={`${this.props.match.path}/new`}>\n            <PlaceInput placeAncestryGroups={placeAncestryGroups} />\n          </Route>\n          <Route path={`${this.props.match.path}/:placeId`}>\n            <Place places={places} />\n            <PlaceComparison places={places} />\n          </Route>\n          <Route path={this.props.match.path}>\n            <Places places={places} />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    places: state.places,\n    placeAncestryGroups: state.placeAncestryGroups,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchPlaces: () => dispatch(fetchPlaces()),\n    fetchAncestryGroups: () => dispatch(fetchAncestryGroups()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacesContainer);\n","import React from \"react\";\n\nimport Loading from \"../Loading\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardLink,\n  CardText,\n  CardColumns,\n} from \"reactstrap\";\n\nconst AncestryGroups = (props) => {\n  if (props.ancestryGroups.length > 0) {\n    return (\n      <CardColumns>\n        {props.ancestryGroups.map((ancestryGroup) => {\n          return (\n            <div className=\"ancestry_group\" key={ancestryGroup.id}>\n              <Card body>\n                <CardBody>\n                  <CardTitle>\n                    <h3>\n                      <CardLink>\n                        <Link\n                          key={ancestryGroup.id}\n                          to={`/ancestry_groups/${ancestryGroup.id}`}\n                        >\n                          {ancestryGroup.attributes.name}\n                        </Link>\n                      </CardLink>\n                    </h3>\n                  </CardTitle>\n                  <CardText>\n                    {ancestryGroup.attributes.national_percent}% of US\n                    population\n                  </CardText>\n                </CardBody>\n              </Card>\n            </div>\n          );\n        })}\n      </CardColumns>\n    );\n  } else {\n    return <Loading />;\n  }\n};\n\nexport default AncestryGroups;\n","import React from \"react\";\nimport Loading from \"../Loading\";\nimport { useParams } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText, Table } from \"reactstrap\";\n\nconst AncestryGroup = (props) => {\n  let { ancestryGroupId } = useParams();\n  if (props.ancestryGroups.length > 0) {\n    const ancestryGroup = props.ancestryGroups.find(\n      (group) => group.id === ancestryGroupId\n    );\n    const places = ancestryGroup.attributes.place_ancestry_groups;\n    places.sort((a, b) =>\n      a.attributes.percent < b.attributes.percent ? 1 : -1\n    );\n    const ancestryGroupCard = ancestryGroup ? (\n      <div className=\"ancestry group\">\n        <Card>\n          <CardBody>\n            <CardTitle>\n              <h3>{ancestryGroup.attributes.name}</h3>\n            </CardTitle>\n            <CardText>\n              Population in the United States:{\" \"}\n              {ancestryGroup.attributes.national_pop.toLocaleString()}\n            </CardText>\n          </CardBody>\n        </Card>\n        <Table>\n          <thead>\n            <tr>\n              <th>Place</th>\n              <th>Percent</th>\n              <th>Relative to overall US population</th>\n            </tr>\n          </thead>\n          {places.map((place) => {\n            return (\n              <tr className=\"place\" key={place.id}>\n                <td>{place.attributes.place.name}</td>\n                <td>{place.attributes.percent}%</td>\n                <td>{place.attributes.relative_to_national}x</td>\n              </tr>\n            );\n          })}\n        </Table>\n      </div>\n    ) : (\n      \"Ancestry group not found\"\n    );\n    return <div>{ancestryGroupCard}</div>;\n  } else return <Loading />;\n};\n\nexport default AncestryGroup;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport AncestryGroups from \"../components/ancestry_groups/AncestryGroups\";\nimport { Route, Switch } from \"react-router-dom\";\nimport AncestryGroup from \"../components/ancestry_groups/AncestryGroup.js\";\nimport { fetchAncestryGroups } from \"../actions/ancestryGroupActions\";\n\nclass AncestryGroupsContainer extends Component {\n  componentDidMount() {\n    this.props.fetchAncestryGroups();\n  }\n\n  render() {\n    const ancestryGroups = this.props.ancestryGroups;\n    return (\n      <div>\n        <Switch>\n          <Route exact path={`${this.props.match.path}/:ancestryGroupId`}>\n            <AncestryGroup ancestryGroups={ancestryGroups} />\n          </Route>\n          <Route path={this.props.match.path}>\n            <AncestryGroups ancestryGroups={ancestryGroups} />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { ancestryGroups: state.ancestryGroups };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchAncestryGroups: () => dispatch(fetchAncestryGroups()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AncestryGroupsContainer);\n","import React from \"react\";\nimport { Jumbotron } from \"reactstrap\";\n\nconst Home = () => {\n  console.log(\"in Home component\");\n  return (\n    <div>\n      <Jumbotron className=\"App-header\">\n        <h1 className=\"display-3\">Welcome to American Ancestries!</h1>\n        <h3>Explore the cultural diversity of the United States</h3>\n        <p className=\"lead\">\n          View different places and see how different ethnic origins are\n          represented there, or view ancestry groups and where they are most\n          strongly represented. If you have Census data you can also input new\n          places with ancestry information.\n        </p>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport PlacesContainer from \"./containers/PlacesContainer\";\nimport AncestryGroupsContainer from \"./containers/AncestryGroupsContainer\";\nimport Home from \"./components/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <Switch>\n            <Route\n              path=\"/places\"\n              render={(routerProps) => {\n                return <PlacesContainer {...routerProps} />;\n              }}\n            />\n            <Route\n              path=\"/ancestry_groups\"\n              render={(routerProps) => {\n                return <AncestryGroupsContainer {...routerProps} />;\n              }}\n            />\n            <Route path=\"\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const reducer = (state = { places: [], ancestryGroups: [] }, action) => {\n  switch (action.type) {\n    case \"ADD_PLACES\":\n      return {\n        ...state,\n        places: action.places,\n      };\n    case \"ADD_PLACE\":\n      return {\n        ...state,\n        places: [...state.places, action.place],\n      };\n    case \"ADD_ANCESTRY_GROUPS\":\n      return {\n        ...state,\n        ancestryGroups: action.ancestryGroups,\n      };\n    case \"ADD_PLACE_ANCESTRY_GROUPS\":\n      return {\n        ...state,\n        placeAncestryGroups: action.ancestryGroups.map((ancestryGroup) => {\n          return {\n            ancestryGroupId: ancestryGroup.id,\n            population: 0,\n            ancestryGroupName: ancestryGroup.attributes.name,\n          };\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers/reducer.js\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst store = createStore(\n  reducer,\n  /* preloadedState, */ composeEnhancers(\n    applyMiddleware(thunk)\n    // other store enhancers if any\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}